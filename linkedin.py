# Import python packages
import streamlit as st
from snowflake.snowpark.context import get_active_session
import altair as alt
import pandas as pd



# Titre principal de l'application
st.title("Tableau de bord LinkedIn : Analyse des donn√©es")
st.write(
    """
    Ce tableau de bord pr√©sente une analyse globale du march√© de l‚Äôemploi sur LinkedIn, en mettant en √©vidence les postes les plus fr√©quemment publi√©s et les mieux r√©mun√©r√©s par industrie, ainsi que la r√©partition des offres selon la taille des entreprises, les secteurs d‚Äôactivit√© et les types de contrats propos√©s.
    """
)

# Connexion √† Snowflake
session = get_active_session()

# Requ√™te SQL1: pour extraire les 10 postes les mieux r√©mun√©r√©s par industrie
# Titre Streamlit
st.title("üìå Top 10 des titres de postes les plus publi√©s par industrie")

query = """
    SELECT 
        ji.industry_id,
        jp.title,
        COUNT(*) AS post_count
    FROM raw.job_postings jp
    JOIN raw.job_industries ji ON jp.job_id = ji.job_id
    GROUP BY ji.industry_id, jp.title
    ORDER BY post_count DESC
    LIMIT 10
"""

# Ex√©cution et transformation en DataFrame pandas
df = session.sql(query).to_pandas()

# ‚úÖ Affichage tableau
st.subheader("üóÉÔ∏è Donn√©es brutes")
st.dataframe(df.rename(columns={
    "INDUSTRY_ID": "Secteur",
    "TITLE": "Titre du poste",
    "POST_COUNT": "Nombre d‚Äôoffres"
}))

# ‚úÖ Affichage graphique avec st.bar_chart
st.subheader("üìà Diagramme interactif (st.bar_chart)")
# Regrouper les titres avec leurs compteurs
bar_df = df[["TITLE", "POST_COUNT"]].set_index("TITLE")
st.bar_chart(bar_df)


# Requ√™te SQL 2: Top 10 des postes les mieux r√©mun√©r√©s par industrie.:

# üì¶ Requ√™te SQL pour r√©cup√©rer les donn√©es
st.title("üí∞ Top 10 des postes les mieux r√©mun√©r√©s par industrie")

# Connexion √† la session Snowpark
session = get_active_session()
# Requ√™te SQL : top salaires par poste et industrie
result = session.sql("""
     SELECT 
        ji.industry_id,
        jp.title,
        MAX(jp.max_salary) AS max_salary
    FROM raw.job_postings jp
    JOIN raw.job_industries ji ON jp.job_id = ji.job_id
    WHERE jp.max_salary IS NOT NULL
    GROUP BY ji.industry_id, jp.title
    ORDER BY max_salary DESC
    LIMIT 10
""").collect()

# Chargement dans pandas
df = pd.DataFrame(result)
df.columns = df.columns.str.lower()

# Graphique Altair : barres horizontales
chart = alt.Chart(df).mark_bar(cornerRadius=4).encode(
    x=alt.X('max_salary:Q', title="Salaire maximum (USD)"),
    y=alt.Y('title:N', sort='-x', title="Poste"),
    color=alt.Color('industry_id:N', title="Industrie"),
    tooltip=['title', 'industry_id', 'max_salary']
).properties(
    width='container',
    height=400
)

# Ajout des valeurs
text = chart.mark_text(
    align='left',
    baseline='middle',
    dx=3
).encode(
    text='max_salary:Q'
)

# Affichage final
st.altair_chart(chart + text, use_container_width=True)



# üß† Requ√™te SQL 3: R√©partition des offres par taille d'entreprise
# R√©sultat r√©cup√©r√© depuis Snowpark
# Titre
st.title("R√©partition des offres d‚Äôemploi par taille d‚Äôentreprise.")

result = session.sql("""
    SELECT 
        c.name AS company_name,
        c.company_size,
        COUNT(*) AS nb_offres
    FROM raw.job_postings jp
    JOIN raw.companies c 
        ON SPLIT_PART(jp.company_id, '.', 1) = c.company_id
    WHERE c.company_size IS NOT NULL
    GROUP BY c.name, c.company_size
    ORDER BY nb_offres DESC
""").collect()

# Chargement dans pandas
df = pd.DataFrame(result)
df.columns = df.columns.str.lower()

# Liste unique des tailles d‚Äôentreprise
available_sizes = df['company_size'].unique().tolist()

# S√©lecteur interactif
selected_sizes = st.multiselect(
    "Filtrer par taille d'entreprise :",
    options=available_sizes,
    default=available_sizes
)

# Filtrage des donn√©es selon la s√©lection
filtered_df = df[df['company_size'].isin(selected_sizes)]

st.caption("Filtrable par taille d'entreprise")

# Graphique Altair : barres verticales group√©es
chart = alt.Chart(filtered_df).mark_bar().encode(
    x=alt.X('company_name:N', sort='-y', title="Entreprise"),
    y=alt.Y('nb_offres:Q', title="Nombre d'offres"),
    color=alt.Color('company_size:N', title="Taille d'entreprise"),
    tooltip=['company_name', 'company_size', 'nb_offres']
).properties(
    width=700,
    height=400
).configure_axisX(labelAngle=-45)

# Affichage du graphique
st.altair_chart(chart, use_container_width=True)



# Requ√™te SQL4: pour obtenir la r√©partition des offres par secteur (industry_id)
result = session.sql("""
    SELECT 
        ji.industry_id,
        COUNT(*) AS nb_offres
    FROM raw.job_postings jp
    JOIN raw.job_industries ji ON jp.job_id = ji.job_id
    WHERE ji.industry_id IS NOT NULL
    GROUP BY ji.industry_id
    ORDER BY nb_offres DESC
    LIMIT 20
""").collect()
# Chargement dans pandas
df = pd.DataFrame(result)
df.columns = df.columns.str.lower()

# Titre
st.title("üìä R√©partition des offres d‚Äôemploi par secteur d‚Äôactivit√©")

# Graphique √† barres horizontales
chart = alt.Chart(df).mark_bar(cornerRadius=3).encode(
    x=alt.X('nb_offres:Q', title='Nombre d‚Äôoffres'),
    y=alt.Y('industry_id:N', sort='-x', title='Secteur (industry_id)'),
    tooltip=['industry_id', 'nb_offres']
).properties(
    width='container',
    height=500
)

# Ajout des √©tiquettes de valeurs
text = chart.mark_text(
    align='left',
    baseline='middle',
    dx=3
).encode(
    text='nb_offres:Q'
)

# Affichage
st.altair_chart(chart + text, use_container_width=True)

#requete5:R√©partition des offres d‚Äôemploi par type d‚Äôemploi (temps plein, stage, temps partiel).

# Titre
st.title("ü•ß R√©partition des offres d‚Äôemploi par type d‚Äôemploi")

result = session.sql("""
     SELECT work_type, COUNT(*) AS nb_offres
    FROM raw.job_postings
    WHERE work_type IS NOT NULL
    GROUP BY work_type
""").collect()

# Conversion en DataFrame et nettoyage noms colonnes
df = pd.DataFrame(result)
df.columns = df.columns.str.lower()

# Calcul pourcentage
df['pct'] = df['nb_offres'] / df['nb_offres'].sum()

# Cr√©ation du camembert Altair (donut)
pie = alt.Chart(df).mark_arc(innerRadius=60).encode(
    theta=alt.Theta(field="nb_offres", type="quantitative"),
    color=alt.Color(field="work_type", type="nominal", legend=alt.Legend(title="Type d‚Äôemploi")),
    tooltip=[alt.Tooltip('work_type:N', title='Type'), alt.Tooltip('nb_offres:Q', title='Nombre d\'offres'), alt.Tooltip('pct:Q', format='.1%', title='Pourcentage')]
)

# Ajout des labels √† l‚Äôext√©rieur, lisibles horizontalement
labels = alt.Chart(df).mark_text(radius=140, size=10).encode(
    theta=alt.Theta(field="nb_offres", type="quantitative"),
    text=alt.Text('work_type:N')
)

st.altair_chart(pie + labels, use_container_width=True)




